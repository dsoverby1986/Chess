@using Chess.Models
@using Chess.Helpers
@model Board
@{ 
    ViewBag.Title = "Play Chess!";
    Board board = Model;
    List<Square> squares = null;
}
<div class="text-center">
    <div class="row fit-content">
        <div class="col-xs-1 square text-center"></div>
        @foreach (char c in board.HorizontalIndex)
        {
            <div class="col-xs-1 square">@c</div>
        }
    </div>
    @for (int i = 0; i < Board.Width; i++)
    {
        <div class="row fit-content">
            @{
                squares = board.Squares.Skip(i * Board.Width).Take(Board.Width).ToList();
            }
            @foreach (Square square in squares)
            {
                if (square == squares.First())
                {
                    <div class="col-xs-1 square text-right vertical-index">
                        @(i + 1)
                    </div>
                }
                <div class="col-xs-1 square @(square.White ? "white" : "black")" data-square-index="@($"{square.HorizontalCoordinate}{square.VerticalCoordinate}")">
                    @Html.Raw(square.InitialPiece != null ? $"<i class=\"glyphicon glyphicon-{square.InitialPiece.Name} piece-{square.InitialPiece.Color}\" data-piece-name=\"{square.InitialPiece.Name}\" data-piece-color=\"{square.InitialPiece.Color}\" data-initial-square=\"{square.InitialPiece.InitialSquare}\"></i>" : string.Empty)
                </div>
            }
        </div>
                }
</div>
@section scripts{
    <script>
        $(function () {
            var castlingPieces = ["tower", "king"];

            $('.square').click(function () {
                debugger;
                if ($('.highlit').length && !$(this).hasClass('highlit')) {
                    attemptMove($('.highlit').children('i'), $(this));
                } else if ($(this).children('.glyphicon').length) {
                    if ($(this).hasClass('highlit'))
                        $(this).removeHighlight();
                    else
                        $(this).highlight();
                }
            });

            function attemptMove(piece, square) {
                debugger;
                var pieceName = piece.data('piece-name');
                var color = piece.data('piece-color');
                var initialCoordinates = piece.data('initial-square');
                var currentCoordinates = piece.parents('.square').data('square-index');
                var includedInCastling = castlingPieces.indexOf(piece) > -1;
                var newCoordinates = square.data('square-index');
                var newCoordPieceColor = square.children('i.glyphicon').data('piece-color');
                var piecePlacementMap = [];
                $('i.glyphicon').each(function () {
                    piecePlacementMap.push($(this).parents('.square').data('square-index'));
                });
                var valid = validateMove(pieceName, color, initialCoordinates, includedInCastling, currentCoordinates, newCoordinates, newCoordPieceColor, piecePlacementMap);
                if (valid) {
                    move(pieceName, currentCoordinates, newCoordinates);
                }
            }

            function validateMove(pieceName, color, initialCoordinates, includedInCastling, currentCoordinates, newCoordinates, newCoordPieceColor, piecePlacementMap) {
                var params = { pieceName: pieceName, color: color, initialCoordinates: initialCoordinates, includedInCastling: includedInCastling, currentCoordinates: currentCoordinates, newCoordinates: newCoordinates, newCoordPieceColor: newCoordPieceColor, piecePlacementMap: piecePlacementMap };
                var encParams = $.param(params);
                $.ajax({
                    type: 'GET',
                    url: '@(Url.Action("ValidateMove", "Home"))',
                    data: encParams,
                    contentType: "application/json; charset=utf-8",
                    traditional: true,
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log({
                            "jqXHR": jqXHR,
                            "textStatus": textStatus,
                            "errorThrown": errorThrown
                        });
                    },
                    success: function (data, textStatus, jqXHR) {
                        return data;
                    }
                });
            }

            function move(piece, currentCoordinates, newCoordinates) {

            }
        });
    </script>
}